import numpy as np

# Input patterns (Y for CAM)
Y1 = [1, 1, 1, 1, 1, 1]
Y2 = [-1, -1, -1, -1, -1, -1]
Y3 = [1, -1, -1, 1, 1, 1]
Y4 = [1, 1, -1, -1, -1, -1]
Y = np.array([Y1, Y2, Y3, Y4])

# Output patterns (X for CAM)
X1 = [1, 1, 1]
X2 = [-1, -1, -1]
X3 = [-1, 1, 1]
X4 = [1, -1, 1]
X = np.array([X1, X2, X3, X4])

print("Y = ", Y)
print("\nX = ", X)
print("\nDimensions of Y: ", Y.shape)
print("\nDimensions of X: ", X.shape)

# Compute weight matrix
weight = np.dot(Y.T, X)
print('\nWeights = \n', weight)

print(f"\nDimensions of Weight Matrix: {weight.shape}")

# Bipolar activation function
def BipolarActivation(matrix, weight):
    matrix[matrix > 0] = 1
    matrix[matrix <= 0] = -1
    return np.array(matrix)

# Backward recall (X to Y)
def backward(X, weight):
    y = np.dot(X, weight.T)
    return BipolarActivation(y, weight)

print(f"\nweight * X1 =  {backward(X1, weight)} & Y1 = {Y1} {np.array_equiv(backward(X1, weight), Y1)}")
print(f"weight * X2 = {backward(X2, weight)} & Y2 = {Y2} {np.array_equiv(backward(X2, weight), Y2)}")
print(f"weight * X3 = {backward(X3, weight)} & Y3 = {Y3} {np.array_equiv(backward(X3, weight), Y3)}")
print(f"weight * X4 = {backward(X4, weight)} & Y4 = {Y4} {np.array_equiv(backward(X4, weight), Y4)}")


# Forward recall (Y to X)
def forward(Y, weight):
    X = np.dot(weight.T, Y)
    return BipolarActivation(X, weight)

print(f"\nweight * Y1 =  {forward(Y1, weight)} & X1 = {X1} {np.array_equiv(forward(Y1, weight), X1)}")
print(f"weight * Y2 = {forward(Y2, weight)} & X2 = {X2} {np.array_equiv(forward(Y2, weight), X2)}")
print(f"weight * Y3 = {forward(Y3, weight)} & X3 = {X3} {np.array_equiv(forward(Y3, weight), X3)}")
print(f"weight * Y4 = {forward(Y4, weight)} & X4 = {X4} {np.array_equiv(forward(Y4, weight), X4)}")
