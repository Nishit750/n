from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
import numpy as np

# Generate some sample data for demonstration
X = np.random.rand(100, 10)  # Sample feature matrix
y = np.random.randint(2, size=100)  # Sample target vector

# Initialize MLP classifier
mlp = MLPClassifier(hidden_layer_sizes=(10, 10), activation='relu', solver='adam',
                    alpha=1e-5, learning_rate_init=0.001, max_iter=1000)
# Initialize KFold cross-validator
kf = KFold(n_splits=5, shuffle=True, random_state=42)

# Lists to store accuracy scores for each fold
accuracy_scores = []

# Perform KFold cross-validation
for train_index, test_index in kf.split(X):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]
    # Train MLP classifier
    mlp.fit(X_train, y_train)
    # Predict on the test set
    y_pred = mlp.predict(X_test)
    # Calculate accuracy and store it
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)

# Calculate average accuracy across all folds
avg_accuracy = np.mean(accuracy_scores)
print("Average accuracy:", avg_accuracy)
