from random import seed,random
from math import exp
# initialization of networks 
def Network(n_inputs,n_hidden,n_output):
    network = list()
    hidden_layer = [{'weights' :[random() for i in range(n_inputs + 1)]} for i in range(n_hidden)]
    network.append(hidden_layer)
    output_layer = [{'weights' :[random() for i in range(n_hidden + 1)]} for i in range(n_output)]
    network.append(output_layer)
    return network

#calculate neuron activation for an input
def activate(weights,inputs):
    activation = weights[-1]
    for i in range(len(weights)-1):
        activation += weights[i] * inputs[i]
    return activation

#transfer activation neuron
def transfer(activation):
    return 1.0 / (1.0 +exp(-activation))

#forword propagate input to network output
def forward_propagate(network,row):
    inputs = row
    for layer in network:
        new_inputs=[]
        for neuron in layer:
            activation = activate(neuron['weights'],inputs)
            neuron['output'] = transfer(activation)
            new_inputs.append(neuron['output'])
        inputs = new_inputs
    return inputs  
    # derivative of transfer of an neuron output
def transfer_derivative(output):
    return output * (1.0 -output)
def backward_propagate_error(network, expected):
    for i in reversed(range(len(network))):
        layer = network[i]
        errors = list()
        if i != len(network)-1:
            for j in range(len(layer)):
                error = 0.0
                for neuron in network[i + 1]:
                    error += (neuron['weights'][j] * neuron['delta'])
                    errors.append(error)
        else:
            for j in range(len(layer)):
                neuron = layer[j]
                errors.append(neuron['output'] - expected[j])
        for j in range(len(layer)):
            neuron = layer[j]
            neuron['delta'] = errors[j] * transfer_derivative(neuron['output'])

# Update network weights with error
def update_weights(network , row , l_rate):
    for i in range(len(network)):
        inputs = row[:-1]
        if i != 0:
            inputs = [neuron['output'] for neuron in network[i - 1]]
            for neuron in network[i]:
                for j in range(len(inputs)):
                    neuron['weights'][j] -= l_rate * neuron['delta'] * inputs[j]
                neuron['weights'][-1] -= l_rate * neuron['delta']
#network Train
def train_network(network,train,l_rate,n_epoch,n_output):
    for epoch in range(n_epoch):
        sum_error = 0
        for row in train:
            outpust = forward_propagate(network,row)
            expected = [0 for i in range(n_output)]
            expected[row[-1]] = 1
            sum_error += sum([expected[i]-output[i]**2 for i in range(len(expected))])
            backward_propagate_error(network,expected)
            update_weights(network,row,l_rate)
        print("> epoch=%d , lrate=%.3f , error=%.3f" % (epoch,l_rate,sum_error))
seed(1)
dataset = [[0,1,1], 
[1,0,1], 
[0,0,0], 
[1,1,0]]
network = Network(2,2,2)
train_network(network,dataset,0.25,20,2)
for layer in network:
    print(layer)
